/* 
   Generally manually now. 
   Should be automated generally through regression tool. 
*/

#ifndef %s_HPP
#define %s_HPP

#include "Signal.hpp"
#include "Feature.hpp"
#include "Px.hpp"

using simulator::SignalOnPxPredict;
using simulator::PFeature;
using simulator::Px;
using simulator::BookSizeChg;
using simulator::BookSizeChg2;
using simulator::VwapMidReturn;
using simulator::TradeDeviationMA;
using simulator::VolumeTrend;
using simulator::Volatility;
using simulator::HighFrequencyVolatility;
using simulator::SignedVolume;
using simulator::SignedVolumeTradeVsMid;
using simulator::SignedVolumeWithBookSizeChg;
using simulator::BookPressure;
using simulator::BookPressureNL;
using simulator::BookPressureLog;
using simulator::ShortTermReturn;
using simulator::WindowedBreakthrough;
using simulator::EMAWindowedBreakthrough;
using simulator::TradeBreakOut;
using simulator::SweepWeak;
using simulator::SweepStrong;

namespace simulator
{

    class %s
    {
    public:
	//signal related
	SignalOnPxPredict<		%s	  > directionSignal_;
    
    %s() {
	// initialize signals
	directionSignal_.registerFeature(%s
					 );

	// register betas
	directionSignal_.registerBeta(%s);

	// register bounds
	%s
    }

	~%s()
	{}
	
    };

}

#endif  // %s_HPP
